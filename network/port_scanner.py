"""

@package: Future Python Framework - Network Library

This file contains the `port_scanner` function, which is used for scanning open ports on a target IP using multiple threads.

The function takes as input the IP address to scan and the number of threads to use, and returns a list of open ports on the target IP.

The function uses the socket library to create a new socket and attempt to connect to each port in the range of 1 to 65535. 
If a connection is successful, the port is considered open and its number is added to the list of open ports. 
The function uses threading to speed up the scanning process by running multiple port scans concurrently.

@author: Haluk YAMANER <haluk@futurefoss.com>

@version: 1.0

@see: https://github.com/FutureFOSS/FuturePython

@see: https://www.futurepython.com

@see: https://www.futurefoss.com

"""

import socket
import threading
import time
import os
from datetime import datetime
from termcolor import colored

# Function to scan a single port
def scan_port(ip, port):
    try:
        # Create a new socket
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        # Set socket timeout
        s.settimeout(1)
        # Attempt to connect to the IP and port
        result = s.connect_ex((ip, port))
        # Check if the port is open
        if result == 0:
            print(f"\r{' ' * 40}\rFound Port: {port}")
            open_ports.append(port)
        # Close the socket
        s.close()
    except Exception as e:
        print(f"\rError scanning port {port}: {e}")

# Function to scan multiple ports using threads
def scan_ports(ip, num_threads):
    threads = []
    for i in range(1, 65536):
        print(f"\rScanning Port: {i}", end='')  # Display the current scanning port dynamically in one line
        t = threading.Thread(target=scan_port, args=(ip, i))
        threads.append(t)
        t.start()
        # If we have reached the desired number of threads, wait for them to finish
        if len(threads) == num_threads:
            for thread in threads:
                thread.join()
            threads = []
    # Wait for any remaining threads to finish
    for thread in threads:
        thread.join()

if __name__ == "__main__":
    # Prompt user for target IP and number of threads
    target_ip = input("Enter the target IP: ")
    num_threads = int(input("Enter the number of threads to use: "))

    start_time = datetime.now()
    open_ports = []

    print("Future Python")
    print("Scanning Ports ...")
    # Begin scanning ports
    scan_ports(target_ip, num_threads)

    end_time = datetime.now()
    duration = end_time.replace(microsecond=0) - start_time.replace(microsecond=0)

    # Display the time it took to scan
    print(f"\nScanning Finished in {duration}")

    # Create a directory named "portscan_results" if it doesn't exist
    os.makedirs("outputs/port_scanner", exist_ok=True)

    # Create filenames with the target IP and date-time
    ports_filename = f"outputs/port_scanner/{target_ip}_{end_time.strftime('%Y%m%d_%H%M%S')}_ports.txt"
    ports_combo = f"outputs/port_scanner/{target_ip}_{end_time.strftime('%Y%m%d_%H%M%S')}_ports_combo.txt"

    # Save the open ports to the first file
    with open(ports_filename, "w") as file:
        file.write(f"# Generated by Future Python Framework\n")
        file.write(f"# https://github.com/FutureFOSS/FuturePython\n")
        file.write(f"# https://www.futurepython.com\n")
        file.write(f"# https://www.futurefoss.com")
        file.write(f"# IP: {target_ip}\n")
        file.write(f"# Scan Date: {end_time.replace(microsecond=0)}\n")
        file.write(f"# Duration: {duration}\n\n")

        for port in open_ports:
            file.write(f"{port}\n")

    # Save the open IP:Port combinations to the second file
    with open(ports_combo, "w") as file:
        file.write(f"# Generated by Future Python Framework\n")
        file.write(f"# https://github.com/FutureFOSS/FuturePython\n")
        file.write(f"# https://www.futurepython.com\n")
        file.write(f"# https://www.futurefoss.com")
        file.write(f"# IP: {target_ip}\n")
        file.write(f"# Scan Date: {end_time.replace(microsecond=0)}\n")
        file.write(f"# Duration: {duration}\n\n")
        for port in open_ports:
            file.write(f"{target_ip}:{port}\n")

    # Inform the user where the results are saved
    print(f"Results saved to {ports_filename} and {ports_combo}")
